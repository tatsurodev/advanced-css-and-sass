@charset "UTF-8";
/* 通常のコメントでcompile後のcss fileにも残る */
/* animationの定義 */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* 擬似クラスも使用しているのでuniversal resetでも一応指定しておくほうがbetter */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* universal resetにbox-sizing: border-box;を使用すると例外的に違うbox-sizingを使用したい時に潰しが効かないのでbox-sizing: inherit;として、使用したい要素でのみbox-sizing: border-boxを使用すると潰しが効く */
  /* box-sizing: border-box; */ }

/* root element */
html {
  /* rootのfont-sizeをpxで指定してしまうとuserがbrowser等でfont-sizeを変更できなくなってしまうためbrowserのdefault font-sizeを引き継いで%で指定してやるとbetter */
  font-size: 62.5%; }

body {
  /* universal resetではなく特定の要素でのみ使用する手法にしたほうが、例外的に違うbox-sizingを使用する時に便利 */
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* 元々のroot font-size */
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* paddingは継承されない */
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* .heading-primary-main, .heading-primary-subで使用するanimationによる小さな揺れをなくすためのhack */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* animationの使用にはname, durationの2つが必須 */
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-delay: 3s;
        animation-iteration-count: 3; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    /* .heading-primary-main、..heading-primary-subの文字の幅が一緒になるように設定 */
    letter-spacing: 1.75rem;
    /* animationの使用を一気に設定 */
    /* animation: animationName duration timingFunction delay */
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* 背景をbackground-clipでtextのみに貼り付けて、そのtextを透明にすると背景のlinear-gradientが見えるという仕組み */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all .2s; }
  .heading-secondary:hover {
    /* skewで歪み */
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

/* : 疑似クラス、pseudo class */
.btn {
  /* .btn::after(変化前), .btn:hover::after(変化後)でやっていることの意味
    &::afterで.btnと同じ大きさのから要素をz-index -1で後ろに隠し、.btn:hover::afterで状態を変化させる */
  /* :: 疑似要素、pseudo element */
  /* 変化前の.btn::after */
  /* 読み込み時下からpopup */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* 全animationの変遷をゆっくりさせる */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    /* hover時にbuttonを浮き上がらせる */
    transform: translateY(-3px);
    /* box-shadow: x, epsilon blur rgba; */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* 変化後の.btn::after、.btn::after:hoverは動かないので注意 */
    /* hover時に上の.btn::afterが、opacity 0 -> 1, scale 大 -> ノーマルに変化、つまり徐々に見えながら元の大きさに戻る */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    /* clickされた時にhover時より沈ませる */
    transform: translateY(-1px);
    /* clickされた時にhover時よりy, blurを小さくすることでclick感が出る */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: white; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    display: inline-block;
    /* 疑似要素は.btnの直下、つまり子要素として挿入されるのでheight, widthの100%指定で.btnと同等のheight, widthを持つこととなる */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* 全property、ここでは下の.btn:hover::afterで指定したtransfor scaleとopacityの値を変化させる */
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out 0.75s;
    /* moveInBottomはdelayが指定してあるので、animationが起こっていない時にそのまま表示されてしまう。これをなくすためにanomation-fill-modeを指定 */
    /* animationが起こっていない時の状態、つまりanimationが起こる前と終わった後の状態を指定する。 forwardsでkeyframe 0%、backwardsでkeyframe 100%のstyleを適用する*/
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.card {
  /* 子要素をrotateさせた時に遠近感を出す */
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  /* 子要素全てがposition: absolute;の場合、floatと同様高さがなくなってしまうので親要素に子要素と同じ高さを効かせる */
  height: 52rem;
  /* rotateをより立体的に見せる為に親要素にperspectiveを設定 */ }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /* transform rotateさせた時に裏を表示するかしないかのproperty */
    backface-visibility: hidden;
    border-radius: 3px;
    /* 子要素の背景がoverflowしてborder-radiusをなくさないようにhidden */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      /* Frontの初期状態はrotateY(0)でhover時にrotateY(180deg) */
      background-color: #fff; }
    .card__side--back {
      /* Backの初期状態はrotateY(180deg)でhover時にrotateY(0) */
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      /* 背景画像を複数指定してbackground-blend-modeで合わせる */
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 60%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /* 要素のボックスが改行によって断片化したとき、要素のbackground, padding, border等がどのように表示するべきかを指定する */
    /* cloneで各fragmentが独立している様に扱う */
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.composition {
  position: relative;
  /* ある写真にhover時に(&:hover), それ以外の写真のscaleを小さくする。&:hoverがないと最初の読み込んだ段階で全写真にstyleが適用されてしまうので注意 */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 0;
      top: 10rem; }
    .composition__photo:hover {
      /* borderはlayoutに影響が出るので、影響の出ないoutlineを使う */
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      /* 影をy方向に長くしてぼかしを大きく色を濃く */
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      /* 一番手前に表示 */
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform .3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: .5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: #fff;
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  /* 全体をskewさせて直後の子要素で逆の角度にskewさせて元に戻す */
  transform: skewX(-12deg); }
  .story__shape {
    width: 15rem;
    height: 15rem;
    background-color: orangered;
    float: left;
    /* 周りの要素がどのようにfloatするかその形状を定義 */
    shape-outside: circle(50% at 50% 50%);
    -webkit-shape-outside: circle(50% at 50% 50%);
    /* 要素自体がどのように見えるようにするか定義 */
    clip-path: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg); }
  .story__img {
    height: 100%; }
  .story__text {
    transform: skewX(12deg); }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class*="col-"] {
    float: left; }
    .row [class*="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  /* vw, vhはviewportに対しての% */
  height: 95vh;
  /* 背景を複数指定 */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* 基準となる固定する場所を指定 */
  background-position: top;
  position: relative;
  /* 切り抜く */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    /* 親要素.headerにはrelative設定済 */
    /* block要素の中央揃えは親要素relative、子要素absoluteを使用 */
    position: absolute;
    /* 親要素に対しての% */
    top: 40%;
    left: 50%;
    /* transformで使う%は要素自身に対する% */
    transform: translate(-50%, -50%);
    /* inline要素の中央揃えにはtext-align: center;を使用 */
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  /* 全体を傾けて下記のselectorで直下の子要素のみに逆の傾きを付けて元に戻す */
  transform: skewY(-7deg);
  margin-top: -10rem; }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem; }

.section-stories {
  padding: 15rem 0;
  background-color: #f7f7f7; }
